#!/bin/sh
PROG=didactic-cl
DESC="Client interface to didactic"
USAGE1="${PROG} --register-image"
USAGE2="${PROG} --check-authorization"
USAGE3="${PROG} --register-deployment"
USAGE4="${PROG} --request-promotion"

HELP_DESC="
This script is meant to be run by a didactic client from a CircleCI build.
It acts as an adapter to underlying scripts.

The CircleCI workspace must have been initialized; see \"didactic-init\".
"
HELP_OPTS="
--register-image
    \"Register\" the current docker image; this maps the source release tag
    to the image so that the image can be retrieved by subsequent CircleCI
    jobs.

--check-authorization
    Check whether the indicated image is authorized for deployment to the
    target deployment environment (identified by the DEPLOY_ENV
    environment variable. If it is authorized, write details of the
    authorization to standard output and return 0. If it is not authorized,
    return 1.

--register-deployment
    Notify didactic that an image has been successfully deployed (or
    more specifically that the image has been tagged with a deployment
    environment in its shared registry).

--request-promotion
    Submit a request to authorize an image for deployment to the target
    deployment environment.
"
HELP_ENV="
DEPLOY_ENV
    The target deployment environment.

IMAGE_METADATA
    The local path where didactic stores the image metadata file.

IMAGE_NAME
    The default name of the image metadata file. Used if the
    <image_metadata_file> is not given.
"

SCRIPTDIR=`cd \`dirname $0\`; pwd`
. ${SCRIPTDIR}/didactic/didactic.rc

MODE=
while [ $# != 0 ] ; do
    case $1 in
        --register-image)
            MODE=register-image ;;
        --check-authorization)
            MODE=check-authorization ;;
        --register-deployment)
            MODE=register-deployment ;;
        --request-promotion)
            MODE=request-promotion ;;
        -*)
            echo "${PROG}: unknown option: $1" >&2
            exit 1 ;;
    esac
    shift
done

# Make sure $INIT_RC has been loaded and is properly initialized
if [ ":${INIT_RC}" = ":" ] ; then
    echo "${PROG}: INIT_RC must be set. Run \"didactic-init\"." >&2
    exit 1
fi
. ${INIT_RC} || exit 1
if [ ":${DIDACTIC_INIT}" != ":true" ] ; then
    echo "${PROG}: didactic has not been initialized. Run \"didactic_init\"" >&2
    exit 1
fi

if [ ":${MODE}" = ":" ] ; then
    echo "${PROG}: no action specified" >&2
    echo "${USAGE}" >&2
    exit 1
fi
if [ ! -f ${IMAGE_METADATA} ] ; then
    echo "${PROG}: ${IMAGE_METADATA}: no such file" >&2
    exit 1
fi

IMAGE_TAG=`jq -r .image_tag ${IMAGE_METADATA}` || exit 1
IMAGE_NAME=`jq -r .image_name ${IMAGE_METADATA}` || exit 1
export IMAGE_TAG IMAGE_NAME
circle-env --add IMAGE_TAG IMAGE_NAME

if [ ${MODE} = "register-image" ] ; then
    remote_name=`docker-image-name --path`
    docker-tag-push "${IMAGE_NAME}:${IMAGE_TAG}" \
        "${remote_name}" "${IMAGE_TAG}" \
        || exit 1

    vecho "Running \"gh-release --register\""
    gh-release --register || exit 1

elif [ ${MODE} = "check-authorization" ] ; then
    autodeploy-check && exit 0
    AUTH=`gh-repo-log --read --type=approved | tail -1`
    if [ ":${AUTH}" = ":" ] ; then
        echo "${PROG}: ${IMAGE_NAME} not authorized for deployment to ${DEPLOY_ENV}" >&2
        exit 1
    fi
    echo "${AUTH}"

elif [ ${MODE} = "register-deployment" ] ; then
    vecho "Running \"gh-repo-log --write --type=deployed\""
    gh-repo-log --write --type=deployed || exit 1

elif [ ${MODE} = "request-promotion" ] ; then
    gh-repo-auth-request
fi
