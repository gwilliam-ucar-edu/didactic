#!/bin/sh
PROG=gh-release
DESC="Map image metadata files using Github \"release assets\""
USAGE1="${PROG} find"
USAGE2="${PROG} register"

HELP_DESC="
This script implements the \"image/version mapping\" component of
the didactic framework using GitHub \"release assets\". It also verifies
that the release object itself is properly defined.

The CircleCI workspace must have been initialized; see \"didactic-init\".

Image metadata files are stored as \"assets\" of GitHub repo \"releases\".

The name of a metadata file asset is the image's IMAGE_TAG metadata
attribute.

This verifies that the GitHub release object exists and is configured
correctly. It is generally executed at the start of a CircleCI workflow.

The didactic framework prescribes that release objects have the following
attributes:
 - The associated tag (\"tag_name\") is a valid semantic version string.
 - If the tag has a pre-release component, it must be an approved name;
   approved names can be defined in the PRERELEASE_ENVIRONMENTS
   environment variable.
 - The release *name* is the release *tag* without a prerelease
   component (e.g. if the tag is \"1.0.0-test+build1\", the name is
   \"1.0.0+build1\".).
 - The release is associated with a specific commit SHA (not a branch).
 - When an associated image is deployed, an image metadata file with
   the name <semver_num>-<timestamp>[<semver_meta>] is uploaded as an
   asset to the release, where <semver_num> is the \"major.minor.patch\"
   part of the release tag, <timestamp> is a compact UTC timestamp
   indicating the image creation time, and <semver_meta> is the metadata
   portion of the release tag (if it is not empty, and with its leading
   \"+\" replaced with \"-\").
 - If there is no metadata file asset corresponding to the current
   release tag, the release tag must have a \"prerelease\" component.

If either of the first two prescriptions is invalid, the script will
write an error message and exit with return code 1, which should cause the
invoking CircleCI job to fail.

It will enforce the remaining prescriptions by modifying the release object
if necessary.

In the case of the last prescription, if the release tag needs to be changed
from a \"production deployment\" tag, the new tag will use the default
deployment environment. In this case, the rc file will run \"exit 1\" after
making the change to the release object and deleting the old tag; note the
change of tag should trigger a new CircleCI job with the new tag.
"
HELP_ARGS="
find
    Check if there is an image metadata file registered with didactic for
    the current release tag. If so, download the file to \${IMAGE_METADATA}
    and print the image tag to standard output.

register
    Register a new image metadata file with didactic.
"
HELP_ENV="
CIRCLE_SHA1
    The git revision SHA1 hash for the current project source release.

DEFAULT_DEPLOY_ENV
    The default deployment environment.

DEPLOY_ENV
    The target deployment environment.

IMAGE_METADATA
    The path for the local copy of the image metadata file.

IMAGE_QUALIFIER
    An optional string used to distinguish different builds of the same
    source revision. It is the \"metadata\" part of the release's semantic
    version string, with \"-\" in place of the leading \"+\".

IMAGE_TAG
    The unique tag for the image. Must be set when registering.

PRODUCTION_ENVIRONMENT
    The name of the production environment.

RELEASE_TAG
    The target release version tag, which must be a semantic version
    string.

SOURCE_VERSION
    The semantic version \"major.minor.patch\" string for the source
    release.
"
SCRIPTDIR=`cd \`dirname $0\`; pwd`
. ${SCRIPTDIR}/didactic.rc || exit 1

# Make sure $INIT_RC has been loaded and is properly initialized
if [ ":${INIT_RC}" = ":" ] ; then
    echo "${PROG}: INIT_RC must be set. Run \"didactic init\"." >&2
    exit 1
fi
. ${INIT_RC} || exit 1
if [ ":${DIDACTIC_INIT}" != ":true" ] ; then
    echo "${PROG}: didactic has not been initialized. Run \"didactic init\"" >&2
    exit 1
fi

ARG="$1"

if [ ":${ARG}" = ":" ] ; then
    echo "${PROG}: one of \"find\" or \"register\" is required" >&2
    echo "${USAGE}" >&2
    exit 1

elif [ ":${ARG}" = ":find" ] ; then
    SVRE=`parse-semver -n "${RELEASE_TAG}" | sed -e 's/\./\\\\./g'`
    IQRE=`parse-semver -m "${RELEASE_TAG}" | sed -e 's/\./\\\\./g' -e 's/\+/\\\\./'`
    REGEX="${SVRE}-[0-9]*T[0-9]*Z${IQRE}$"

    github-release-util --download-asset="${REGEX}" "${RELEASE_TAG}" >${IMAGE_METADATA}
    if [ -s ${IMAGE_METADATA} ] ; then
        . ${IMAGE_METADATA}
    else
        IMAGE_TAG=
    fi
    export IMAGE_TAG
    circle-env --add IMAGE_TAG

    # Verify that the project's GitHub repo has an appropriately configured
    # release object, and patches the release object if necessary. If there
    # is an uncorrectable problem with the release, or if the release needs
    # a new tag, do "exit 1" to force the CircleCI job to abort
    . gh-release-check.rc

    echo "${IMAGE_TAG}"
    exit 0

elif [ ":${ARG}" = ":register" ] ; then
    if [ ":${IMAGE_TAG}" = ":" ]
        echo "${PROG}: IMAGE_TAG must be set" >&2
        exit 1
    fi
    if [ ! -s "${IMAGE_METADATA}" ] ; then
        echo "${PROG}: ${IMAGE_METADATA} must contain data" >&2
        exit 1
    fi

    vecho "Running \"github-release-util --upload-asset="${IMAGE_METADATA}" --asset="${IMAGE_TAG}\""
    github-release-util --upload-asset="${IMAGE_METADATA}" --asset="${IMAGE_TAG}" \
 || exit 1
    
else
    echo "${PROG}: invalid option: $1" >&2
    echo "${USAGE}" >&2
    exit 1
fi



